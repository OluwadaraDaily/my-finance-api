"""Add user_id to transactions table and back populate the users table

Revision ID: 4aa32d4e7cca
Revises: b20ef0b74541
Create Date: 2025-06-05 20:38:20.131270+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = '4aa32d4e7cca'
down_revision: Union[str, None] = 'b20ef0b74541'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_api_keys_id'), table_name='api_keys')
    op.drop_index(op.f('key'), table_name='api_keys')
    op.drop_table('api_keys')
    op.add_column('transactions', sa.Column('user_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'transactions', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'transactions', type_='foreignkey')
    op.drop_column('transactions', 'user_id')
    op.create_table('api_keys',
    sa.Column('id', mysql.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', mysql.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('name', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('key', mysql.VARCHAR(length=255), nullable=False),
    sa.Column('is_active', mysql.TINYINT(display_width=1), autoincrement=False, nullable=True),
    sa.Column('created_at', mysql.DATETIME(), nullable=True),
    sa.Column('last_used_at', mysql.DATETIME(), nullable=True),
    sa.Column('expires_at', mysql.DATETIME(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('api_keys_ibfk_1')),
    sa.PrimaryKeyConstraint('id'),
    mysql_collate='utf8mb4_0900_ai_ci',
    mysql_default_charset='utf8mb4',
    mysql_engine='InnoDB'
    )
    op.create_index(op.f('key'), 'api_keys', ['key'], unique=True)
    op.create_index(op.f('ix_api_keys_id'), 'api_keys', ['id'], unique=False)
    # ### end Alembic commands ### 